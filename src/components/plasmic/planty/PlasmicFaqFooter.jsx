// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: ozcq8GxerrF1WYaqjsW34y
// Component: sMoyg3EwcXz4G9
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/react-web/lib/host";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import MenuButton from "../../MenuButton"; // plasmic-import: V-Evw1O_93TrWQ/component
import { useScreenVariants as useScreenVariantssOxgEMpX5WMfyx } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: sOxgEMpX5wMfyx/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_library_plasmic_color_type_css from "../library_plasmic_color_type/plasmic_library_plasmic_color_type.module.css"; // plasmic-import: seaQhLVS4bbjiGvJJrRwyL/projectcss
import projectcss from "./plasmic_planty.module.css"; // plasmic-import: ozcq8GxerrF1WYaqjsW34y/projectcss
import sty from "./PlasmicFaqFooter.module.css"; // plasmic-import: sMoyg3EwcXz4G9/css
import LocationSvgrepoCom1SvgIcon from "./icons/PlasmicIcon__LocationSvgrepoCom1Svg"; // plasmic-import: AwQWMO6tSqwvur/icon
import LogoWhitesvgIcon from "./icons/PlasmicIcon__LogoWhitesvg"; // plasmic-import: balrGAwrw01e0o/icon
import promowebpZPzX4E2K21DeiP from "./images/promowebp.webp"; // plasmic-import: zPzX4E2k21DeiP/picture

export const PlasmicFaqFooter__VariantProps = new Array();

export const PlasmicFaqFooter__ArgProps = new Array();

const __wrapUserFunction =
  globalThis.__PlasmicWrapUserFunction ?? ((loc, fn) => fn());

const __wrapUserPromise =
  globalThis.__PlasmicWrapUserPromise ??
  (async (loc, promise) => {
    return await promise;
  });

function PlasmicFaqFooter__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);
  const $props = {
    ...args,
    ...variants
  };
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  const currentUser = p.useCurrentUser?.() || {};
  const [$queries, setDollarQueries] = React.useState({});
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantssOxgEMpX5WMfyx()
  });
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        projectcss.plasmic_tokens,
        plasmic_library_plasmic_color_type_css.plasmic_tokens,
        sty.root
      )}
    >
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__hExTb)}>
          <div className={classNames(projectcss.all, sty.columns___0RiWe)}>
            <div className={classNames(projectcss.all, sty.column__mWPub)}>
              <p.PlasmicImg
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"562px"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"947px"}
                loading={"lazy"}
                src={{
                  src: promowebpZPzX4E2K21DeiP,
                  fullWidth: 720,
                  fullHeight: 525,
                  aspectRatio: undefined
                }}
              />
            </div>
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.column__tvvAp)}
            >
              <h1
                data-plasmic-name={"h1"}
                data-plasmic-override={overrides.h1}
                className={classNames(
                  projectcss.all,
                  projectcss.h1,
                  projectcss.__wab_text,
                  sty.h1
                )}
              >
                {hasVariant(globalVariants, "screen", "mobile")
                  ? "Behold our FAQ"
                  : "Still have questions?\nContact us. "}
              </h1>
              <div className={classNames(projectcss.all, sty.columns__lCdc2)}>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__ew7SK)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__fzCw4
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Behold our FAQ"
                      : "226 rue St-Joseph E, \nQu√©bec, QC, Canada, \nG1K 3A9"}
                  </div>
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__vwgpL
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Behold our FAQ"
                      : "+1-202-555-0112"}
                  </div>
                </p.Stack>
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.column__md0Ki)}
                >
                  <div
                    className={classNames(
                      projectcss.all,
                      projectcss.__wab_text,
                      sty.text__uLfae
                    )}
                  >
                    {hasVariant(globalVariants, "screen", "mobile")
                      ? "Behold our FAQ"
                      : "geeks@snipcart.com"}
                  </div>
                  {(
                    hasVariant(globalVariants, "screen", "mobile") ? true : true
                  ) ? (
                    <div
                      className={classNames(
                        projectcss.all,
                        sty.freeBox___3F8En
                      )}
                    >
                      {(
                        hasVariant(globalVariants, "screen", "mobile")
                          ? true
                          : true
                      ) ? (
                        <p.Stack
                          as={"a"}
                          hasGap={true}
                          className={classNames(
                            projectcss.all,
                            projectcss.a,
                            sty.link__a84S
                          )}
                        >
                          <LocationSvgrepoCom1SvgIcon
                            className={classNames(
                              projectcss.all,
                              sty.svg__j0Kky
                            )}
                            role={"img"}
                          />

                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__dcRf8
                            )}
                          >
                            {hasVariant(globalVariants, "screen", "mobile")
                              ? "Discover"
                              : "On the map"}
                          </div>
                        </p.Stack>
                      ) : null}
                    </div>
                  ) : null}
                </p.Stack>
                <div
                  className={classNames(projectcss.all, sty.column__x70Ya)}
                />
              </div>
            </p.Stack>
          </div>
        </div>
      ) : null}
      {true ? (
        <div className={classNames(projectcss.all, sty.freeBox__bEldL)}>
          <p.Stack
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__py28J)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__un3LW)}
            >
              {(
                hasVariant(globalVariants, "screen", "mobile") ? true : true
              ) ? (
                <MenuButton
                  data-plasmic-name={"menuButton"}
                  data-plasmic-override={overrides.menuButton}
                  className={classNames("__wab_instance", sty.menuButton)}
                />
              ) : null}
              {true ? (
                <p.Stack
                  as={"div"}
                  hasGap={true}
                  className={classNames(projectcss.all, sty.freeBox__kKtpU)}
                >
                  <LogoWhitesvgIcon
                    className={classNames(projectcss.all, sty.svg__htMb)}
                    role={"img"}
                  />

                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__rjnmY
                    )}
                    href={"#"}
                  >
                    {"Store"}
                  </a>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link___79XzT
                    )}
                    href={"#"}
                  >
                    {"About"}
                  </a>
                  <a
                    className={classNames(
                      projectcss.all,
                      projectcss.a,
                      projectcss.__wab_text,
                      sty.link__doW
                    )}
                    href={"#"}
                  >
                    {"Faq"}
                  </a>
                </p.Stack>
              ) : null}
              <div className={classNames(projectcss.all, sty.freeBox__l34Jj)}>
                <div
                  className={classNames(
                    projectcss.all,
                    projectcss.__wab_text,
                    sty.text___0GNZ
                  )}
                >
                  {
                    "¬© Company. All rights reserved. This site proudly built with "
                  }
                </div>
                <a
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__nFvum
                  )}
                  href={"https://www.plasmic.app/"}
                >
                  {"Plasmic"}
                </a>
              </div>
            </p.Stack>
          </p.Stack>
        </div>
      ) : null}
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "img", "h1", "menuButton"],
  img: ["img"],
  h1: ["h1"],
  menuButton: ["menuButton"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicFaqFooter__ArgProps,
          internalVariantPropNames: PlasmicFaqFooter__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicFaqFooter__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicFaqFooter";
  } else {
    func.displayName = `PlasmicFaqFooter.${nodeName}`;
  }
  return func;
}

export const PlasmicFaqFooter = Object.assign(
  // Top-level PlasmicFaqFooter renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    img: makeNodeComponent("img"),
    h1: makeNodeComponent("h1"),
    menuButton: makeNodeComponent("menuButton"),
    // Metadata about props expected for PlasmicFaqFooter
    internalVariantProps: PlasmicFaqFooter__VariantProps,
    internalArgProps: PlasmicFaqFooter__ArgProps
  }
);

export default PlasmicFaqFooter;
/* prettier-ignore-end */
